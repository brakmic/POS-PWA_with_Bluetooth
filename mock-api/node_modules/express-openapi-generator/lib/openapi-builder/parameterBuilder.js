"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utl_1 = __importDefault(require("../utl"));
class ParameterBuilder {
    constructor(name, _in) {
        const parameter = { name, in: _in };
        if (_in === 'path') {
            parameter.required = true;
        }
        this._parameter = parameter;
    }
    /**
     * Starts building a path parameter object
     *
     * @param name The name of the parameter
     * @returns ParameterBuilder instance for method chaining
     */
    static path(name) {
        return new ParameterBuilder(name, 'path');
    }
    /**
     * Starts building a query parameter object
     *
     * @param name The name of the parameter
     * @returns ParameterBuilder instance for method chaining
     */
    static query(name) {
        return new ParameterBuilder(name, 'query');
    }
    /**
     * Starts building a header parameter object
     *
     * @param name The name of the parameter
     * @returns ParameterBuilder instance for method chaining
     */
    static header(name) {
        return new ParameterBuilder(name, 'header');
    }
    /**
     * Starts building a cookie parameter object
     *
     * @param name The name of the parameter
     * @returns ParameterBuilder instance for method chaining
     */
    static cookie(name) {
        return new ParameterBuilder(name, 'cookie');
    }
    /**
     * Sets the required field, defaults to true
     *
     * @param {boolean} [required=true] Required flag
     * @returns ParameterBuilder instance for method chaining
     */
    isRequired(required = true) {
        this._parameter.required = required;
        return this;
    }
    /**
     * Sets the deprecated field, defaults to true
     *
     * @param {boolean} [deprecated=true] Deprecated flag
     * @returns ParameterBuilder instance for method chaining
     */
    deprecated(deprecated = true) {
        this._parameter.deprecated = deprecated;
        return this;
    }
    /**
     * Sets the parameter's schema to be a simple string type.
     * Used to offer quick complete - does not require .build()
     *
     * @returns A complete OpenApiv3 parameter object
     */
    stringType() {
        this._parameter.schema = { type: 'string' };
        return (0, utl_1.default)(this._parameter);
    }
    /**
     * Sets the parameter's schema to be a simple boolean type.
     * Used to offer quick complete - does not require .build()
     *
     * @returns A complete OpenApiv3 parameter object
     */
    booleanType() {
        this._parameter.schema = { type: 'boolean' };
        return (0, utl_1.default)(this._parameter);
    }
    /**
     * Sets the parameter's schema to be a simple integer type.
     * Used to offer quick complete - does not require .build()
     *
     * @returns A complete OpenApiv3 parameter object
     */
    integerType() {
        this._parameter.schema = { type: 'integer' };
        return (0, utl_1.default)(this._parameter);
    }
    /**
     * Sets the parameter's schema to be a simple number type.
     * Used to offer quick complete - does not require .build()
     *
     * @returns A complete OpenApiv3 parameter object
     */
    numberType() {
        this._parameter.schema = { type: 'number' };
        return (0, utl_1.default)(this._parameter);
    }
    /**
     * Sets the parameter's schema field
     *
     * @returns ParameterBuilder instance for method chaining
     */
    schema(schema) {
        this._parameter.schema = schema;
        return this;
    }
    /**
     * Sets the parameter's schema field
     *
     * @returns ParameterBuilder instance for method chaining
     */
    example(example) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        this._parameter.example = example;
        return this;
    }
    /**
     * Creates a deep copy of the current state of the parameter object and returns it.
     *
     * @returns A deep copy of the built parameter object
     */
    build() {
        return (0, utl_1.default)(this._parameter);
    }
    /**
     * Shorthand for build() method.
     *
     * @returns A deep copy of the built parameter object
     */
    b() {
        return this.build();
    }
}
exports.default = ParameterBuilder;
