import { OpenAPIV3 } from 'openapi-types';
export declare type ResponseDefaults = {
    headers?: {
        [header: string]: OpenAPIV3.ReferenceObject | OpenAPIV3.HeaderObject;
    };
    content?: {
        [media: string]: OpenAPIV3.MediaTypeObject;
    };
    links?: {
        [link: string]: OpenAPIV3.ReferenceObject | OpenAPIV3.LinkObject;
    };
    mimeType?: string;
    status?: number;
};
export default class ResponseBuilder {
    private _mimeType?;
    private static _defaults?;
    /**
     * Sets defaults for the response object when using the build interface
     *
     * @param defaults The defaults to set - these are global to the ResponseBuilder class
     */
    static defaults(defaults: ResponseDefaults): void;
    /**
     * Start building a new Response object
     *
     * @param description The description of the response object - only OpenApiv3 required field
     * @returns ResponseBuilder instances for method chaining
     */
    static new(description: string): ResponseBuilder;
    private readonly _response;
    private constructor();
    /**
     * Creates a deep copy of the current state of the response and returns it.
     *
     * @returns A deep copy of the built response object
     */
    build(): OpenAPIV3.ResponseObject;
    /**
     * Shorthand for build() method
     *
     * @returns A deep copy of the built response object
     */
    b(): OpenAPIV3.ResponseObject;
    /**
     * Add a header field to the Response object
     *
     * @param headers The header object per OpenApiv3 spec
     * @returns ResponseBuilder instances for method chaining
     */
    headers: (headers: {
        [header: string]: OpenAPIV3.ReferenceObject | OpenAPIV3.HeaderObject;
    }) => ResponseBuilder;
    /**
     * Add a content field to the Response object
     *
     * @param content The content object per OpenApiv3 spec
     * @returns ResponseBuilder instances for method chaining
     */
    content: (content: {
        [media: string]: OpenAPIV3.MediaTypeObject;
    }) => ResponseBuilder;
    /**
     * Add the schema object to the response object.
     * Allows for defining the type of media in place, or inheriting a global default.
     *
     * @param schema The MediaType object per OpenApiv3 spec
     * @param mimeType The string of a valid MIME type
     * @returns ResponseBuilder instances for method chaining
     * @throws A error if there is no default MIME and a mimeType wasn't included locally
     */
    schema: (schema: OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject, mimeType?: string) => ResponseBuilder;
    /**
     * Add the schema object to the response object as an array.
     * Allows for defining the type of media in place, or inheriting a global default.
     *
     * @param schema The MediaType object per OpenApiv3 spec
     * @param mimeType The string of a valid MIME type
     * @returns ResponseBuilder instances for method chaining
     * @throws A error if there is no default MIME and a mimeType wasn't included locally
     */
    schemaArray: (schema: OpenAPIV3.SchemaObject | OpenAPIV3.ReferenceObject, mimeType?: string) => ResponseBuilder;
    /**
     * Add a links field to the Response object
     *
     * @param links The links object per OpenApiv3 spec
     * @returns ResponseBuilder instances for method chaining
     */
    links: (links: {
        [link: string]: OpenAPIV3.ReferenceObject | OpenAPIV3.LinkObject;
    }) => ResponseBuilder;
}
