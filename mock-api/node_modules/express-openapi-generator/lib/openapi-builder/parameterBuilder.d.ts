import { OpenAPIV3 } from 'openapi-types';
export default class ParameterBuilder {
    private readonly _parameter;
    /**
     * Starts building a path parameter object
     *
     * @param name The name of the parameter
     * @returns ParameterBuilder instance for method chaining
     */
    static path(name: string): ParameterBuilder;
    /**
     * Starts building a query parameter object
     *
     * @param name The name of the parameter
     * @returns ParameterBuilder instance for method chaining
     */
    static query(name: string): ParameterBuilder;
    /**
     * Starts building a header parameter object
     *
     * @param name The name of the parameter
     * @returns ParameterBuilder instance for method chaining
     */
    static header(name: string): ParameterBuilder;
    /**
     * Starts building a cookie parameter object
     *
     * @param name The name of the parameter
     * @returns ParameterBuilder instance for method chaining
     */
    static cookie(name: string): ParameterBuilder;
    private constructor();
    /**
     * Sets the required field, defaults to true
     *
     * @param {boolean} [required=true] Required flag
     * @returns ParameterBuilder instance for method chaining
     */
    isRequired(required?: boolean): this;
    /**
     * Sets the deprecated field, defaults to true
     *
     * @param {boolean} [deprecated=true] Deprecated flag
     * @returns ParameterBuilder instance for method chaining
     */
    deprecated(deprecated?: boolean): this;
    /**
     * Sets the parameter's schema to be a simple string type.
     * Used to offer quick complete - does not require .build()
     *
     * @returns A complete OpenApiv3 parameter object
     */
    stringType(): OpenAPIV3.ParameterObject;
    /**
     * Sets the parameter's schema to be a simple boolean type.
     * Used to offer quick complete - does not require .build()
     *
     * @returns A complete OpenApiv3 parameter object
     */
    booleanType(): OpenAPIV3.ParameterObject;
    /**
     * Sets the parameter's schema to be a simple integer type.
     * Used to offer quick complete - does not require .build()
     *
     * @returns A complete OpenApiv3 parameter object
     */
    integerType(): OpenAPIV3.ParameterObject;
    /**
     * Sets the parameter's schema to be a simple number type.
     * Used to offer quick complete - does not require .build()
     *
     * @returns A complete OpenApiv3 parameter object
     */
    numberType(): OpenAPIV3.ParameterObject;
    /**
     * Sets the parameter's schema field
     *
     * @returns ParameterBuilder instance for method chaining
     */
    schema(schema: OpenAPIV3.SchemaObject): this;
    /**
     * Sets the parameter's schema field
     *
     * @returns ParameterBuilder instance for method chaining
     */
    example(example: any): this;
    /**
     * Creates a deep copy of the current state of the parameter object and returns it.
     *
     * @returns A deep copy of the built parameter object
     */
    build(): OpenAPIV3.ParameterObject;
    /**
     * Shorthand for build() method.
     *
     * @returns A deep copy of the built parameter object
     */
    b(): OpenAPIV3.ParameterObject;
}
