"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utl_1 = __importDefault(require("../utl"));
class ResponseBuilder {
    constructor(description) {
        var _a;
        /**
         * Add a header field to the Response object
         *
         * @param headers The header object per OpenApiv3 spec
         * @returns ResponseBuilder instances for method chaining
         */
        this.headers = (headers) => {
            this._response.headers = (0, utl_1.default)(headers);
            return this;
        };
        /**
         * Add a content field to the Response object
         *
         * @param content The content object per OpenApiv3 spec
         * @returns ResponseBuilder instances for method chaining
         */
        this.content = (content) => {
            this._response.content = (0, utl_1.default)(content);
            return this;
        };
        /**
         * Add the schema object to the response object.
         * Allows for defining the type of media in place, or inheriting a global default.
         *
         * @param schema The MediaType object per OpenApiv3 spec
         * @param mimeType The string of a valid MIME type
         * @returns ResponseBuilder instances for method chaining
         * @throws A error if there is no default MIME and a mimeType wasn't included locally
         */
        this.schema = (schema, mimeType) => {
            if (!mimeType && !this._mimeType) {
                throw new Error('A media type must either be select as a default or provided - e.g. application/json');
            }
            mimeType = mimeType || this._mimeType;
            if (!this._response.content) {
                this._response.content = {};
            }
            this._response.content[mimeType] = { schema };
            return this;
        };
        /**
         * Add the schema object to the response object as an array.
         * Allows for defining the type of media in place, or inheriting a global default.
         *
         * @param schema The MediaType object per OpenApiv3 spec
         * @param mimeType The string of a valid MIME type
         * @returns ResponseBuilder instances for method chaining
         * @throws A error if there is no default MIME and a mimeType wasn't included locally
         */
        this.schemaArray = (schema, mimeType) => {
            this.schema({ type: 'array', items: schema }, mimeType);
            return this;
        };
        /**
         * Add a links field to the Response object
         *
         * @param links The links object per OpenApiv3 spec
         * @returns ResponseBuilder instances for method chaining
         */
        this.links = (links) => {
            this._response.links = (0, utl_1.default)(links);
            return this;
        };
        const d = (0, utl_1.default)(ResponseBuilder._defaults);
        this._mimeType = (_a = ResponseBuilder._defaults) === null || _a === void 0 ? void 0 : _a.mimeType;
        d === null || d === void 0 ? true : delete d.mimeType;
        this._response = Object.assign({ description }, d);
    }
    /**
     * Sets defaults for the response object when using the build interface
     *
     * @param defaults The defaults to set - these are global to the ResponseBuilder class
     */
    static defaults(defaults) {
        ResponseBuilder._defaults = (0, utl_1.default)(defaults);
    }
    /**
     * Start building a new Response object
     *
     * @param description The description of the response object - only OpenApiv3 required field
     * @returns ResponseBuilder instances for method chaining
     */
    static new(description) {
        return new ResponseBuilder(description);
    }
    /**
     * Creates a deep copy of the current state of the response and returns it.
     *
     * @returns A deep copy of the built response object
     */
    build() {
        return (0, utl_1.default)(this._response);
    }
    /**
     * Shorthand for build() method
     *
     * @returns A deep copy of the built response object
     */
    b() {
        return this.build();
    }
}
exports.default = ResponseBuilder;
