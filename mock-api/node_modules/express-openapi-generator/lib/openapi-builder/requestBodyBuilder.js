"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utl_1 = __importDefault(require("../utl"));
class RequestBodyBuilder {
    constructor(description) {
        var _a;
        /**
         * Add a content field to the request body object
         *
         * @param content The content object per OpenApiv3 spec
         * @returns RequestBodyBuilder instances for method chaining
         */
        this.content = (content) => {
            const d = (0, utl_1.default)(RequestBodyBuilder._defaults);
            d === null || d === void 0 ? true : delete d.mimeType;
            this._requestBody = Object.assign({ content: (0, utl_1.default)(content) }, d);
            return this;
        };
        /**
         * Add the schema object to the request body object.
         * Allows for defining the type of media in place, or inheriting a global default.
         *
         * @param schema The MediaType object per OpenApiv3 spec
         * @param mimeType The string of a valid MIME type
         * @returns RequestBodyBuilder instances for method chaining
         * @throws A error if there is no default MIME and a mimeType wasn't included locally
         */
        this.schema = (schema, mimeType) => {
            if (!mimeType && !this._mimeType) {
                throw new Error('A media type must either be select as a default or provided - e.g. application/json');
            }
            mimeType = mimeType || this._mimeType;
            const content = {};
            content[mimeType] = { schema };
            this._requestBody = {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                content,
            };
            return this;
        };
        /**
         * Add the schema object to the request body object as an array.
         * Allows for defining the type of media in place, or inheriting a global default.
         *
         * @param schema The MediaType object per OpenApiv3 spec
         * @param mimeType The string of a valid MIME type
         * @returns RequestBodyBuilder instances for method chaining
         * @throws A error if there is no default MIME and a mimeType wasn't included locally
         */
        this.schemaArray = (schema, mimeType) => {
            this.schema({ type: 'array', items: schema }, mimeType);
            return this;
        };
        this._mimeType = (_a = RequestBodyBuilder._defaults) === null || _a === void 0 ? void 0 : _a.mimeType;
        this._description = description;
    }
    /**
     * Sets defaults for the request body object when using the build interface
     *
     * @param defaults The defaults to set - these are global to the RequestBodyBuilder class
     */
    static defaults(defaults) {
        RequestBodyBuilder._defaults = (0, utl_1.default)(defaults);
    }
    /**
     * Start building a new request body object
     *
     * @param description The optional description of the request body object - only OpenApiv3 required field
     * @returns RequestBodyBuilder instances for method chaining
     */
    static new(description) {
        return new RequestBodyBuilder(description);
    }
    /**
     * Creates a deep copy of the current state of the request body and returns it.
     *
     * @returns A deep copy of the built request body object
     */
    build() {
        if (!this._requestBody) {
            throw new Error('content/schema object required to be set to build a RequestBody.');
        }
        this._requestBody.description = this._description;
        return (0, utl_1.default)(this._requestBody);
    }
    /**
     * Short hand for build()
     *
     * @returns A deep copy of the built request body object
     */
    b() {
        return this.build();
    }
}
exports.default = RequestBodyBuilder;
